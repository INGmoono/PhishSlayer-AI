---
import {
    SignUpButton,
    SignInButton,
    SignedIn,
    SignedOut,
    UserButton,
} from "@clerk/astro/components";
import "../styles/global.css";
---

<header class="flex m-3 gap-5 justify-center">
    <h1 class="font-bold">PhishSlayer</h1>
    <a href="#" class="font-medium hover:underline">Service</a>
    <a href="#" class="font-medium hover:underline">Functionality</a>
    <a href="#" class="font-medium hover:underline">Usage</a>
    <SignedOut>
        <p class="font-medium hover:underline"><SignInButton mode="modal" /></p>
        <p class="font-medium hover:underline"><SignUpButton mode="modal" /></p>
    </SignedOut>
    <SignedIn>
        <p class="font-medium hover:underline"><UserButton /></p>
    </SignedIn>
</header>

<main class="m-10 mt-20 flex flex-row gap-10 place-items-center justify-center">
    <div class="m-10">
        <div class="flex flex-row">
            <h2 class="text-8xl font-bold mb-10">Set your link</h2>
        </div>
        <form class="mt-5 flex flex-row gap-3" id="scanForm">
            <input
                required
                type="url"
                name="link"
                placeholder="https://malicious-link.com"
                id="link"
                class="w-96 rounded-xl border-2 border-gray-100 p-3"
            />
            <button
                type="submit"
                class="rounded-xl bg-gray-500 p-3 font-semibold text-gray-100"
            >
                Detect maliciousness
            </button>
        </form>

        <div id="result" class="mt-5 text-xl underline"></div>
        <button
            id="toggleDetails"
            class="hidden mt-5 rounded-xl bg-gray-500 p-3 font-semibold text-gray-100 hover:cursor-pointer"
        >
            Ver información de este link
        </button>
        <div
            id="details"
            class="hidden mt-4 text-sm text-gray-800 bg-blue-50 p-4 rounded-xl w-full max-w-xl"
        >
        </div>
    </div>

    <div
        id="history"
        class="mt-10 w-2xl text-center bg-gray-50 h-auto rounded-xl shadow-lg p-6"
    >
        <h3 class="p-4 text-2xl font-semibold text-gray-800">URL history</h3>
        <ul id="historyList" class="space-y-3"></ul>
    </div>
</main>

<div class="min-h-screen bg-gray-950 text-gray-100 px-6 py-12">
    <div class="mx-52 space-y-12"> 
        <h1
            class="text-5xl font-bold text-gray-100 border-b border-gray-800 pb-4" 
        >
            ¿Cómo funciona este verificador de URLs?
        </h1>

        <section
            class="bg-gray-900 rounded-2xl shadow-lg p-6 border border-gray-800 space-y-4"
        >
            <h2 class="text-2xl font-semibold text-gray-100">
                Proceso de análisis
            </h2>
            <ul class="list-disc list-inside text-gray-300 space-y-2">
                <li>
                    La URL se envía a <strong>VirusTotal</strong>, que usa más
                    de 70 motores de seguridad.
                </li>
                <li>
                    Se espera unos segundos para obtener un reporte actualizado.
                </li>
                <li>
                    Resultados posibles:
                    <ul class="list-disc list-inside ml-4 text-gray-400">
                        <li>
                            Si <em>al menos un motor</em> la marca como peligrosa,
                            se clasifica como maliciosa.
                        </li>
                        <li>
                            Si <em>todos</em> la consideran segura, se marca como
                            no maliciosa.
                        </li>
                    </ul>
                </li>
            </ul>
        </section>

        <section
            class="bg-gray-900 rounded-2xl shadow-lg p-6 border border-gray-800 space-y-4"
        >
            <h2 class="text-2xl font-semibold text-gray-100">Limitaciones</h2>
            <ul class="list-disc list-inside text-gray-300 space-y-2">
                <li>URLs nuevas o sin contenido pueden parecer seguras.</li>
                <li>
                    VirusTotal <strong>no verifica si un sitio existe</strong>,
                    solo su reputación si ya fue escaneado.
                </li>
                <li>
                    Direcciones falsas pueden pasar desapercibidas inicialmente.
                </li>
            </ul>
        </section>

        <section
            class="bg-gray-900 rounded-2xl shadow-lg p-6 border border-gray-800 space-y-4"
        >
            <h2 class="text-2xl font-semibold text-gray-100">
                Motores utilizados
            </h2>
            <p class="text-gray-400">
                VirusTotal usa motores antivirus, antiphishing y de reputación.
                Algunos destacados:
            </p>
            <div
                class="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm text-gray-300"
            >
                {
                    [
                        "ADMINUSLabs",
                        "AlienVault",
                        "BitDefender",
                        "Comodo Site Inspector",
                        "ESET",
                        "Google Safebrowsing",
                        "Kaspersky URL advisor",
                        "Malwarebytes hpHosts",
                        "Phishtank",
                        "Sophos",
                        "Trend Micro",
                        "Yandex Safebrowsing",
                        "Zvelo",
                    ].map((engine, i) => (
                        <span
                            key={i}
                            class="bg-gray-800 px-3 py-1 rounded-full"
                        >
                            {engine}
                        </span>
                    ))
                }
            </div>
            <p class="text-gray-500 text-sm">
                * No todos los motores se activan siempre. Dependen del
                historial, contenido y estado reciente.
            </p>
        </section>
    </div>
</div>

<script>
    // Types
    interface ScanResult {
        url: string;
        malicious: boolean;
        stats: Record<string, number>;
    }

    interface HistoryItem {
        url: string;
        malicious: boolean;
    }

    // Constants
    const API_URL = `${import.meta.env.PUBLIC_API_BASE_URL}/scan-url`;
    const MAX_HISTORY_ITEMS = 10;

    // State Management
    class AppState {
        private count: number;
        private lastStats: Record<string, number> | null = null;

        constructor() {
            this.count = Number(localStorage.getItem("count") || 0);
        }

        incrementCount(): void {
            this.count++;
            localStorage.setItem("count", String(this.count));
        }

        getCount(): number {
            return this.count;
        }

        setLastStats(stats: Record<string, number>): void {
            this.lastStats = stats;
        }

        getLastStats(): Record<string, number> | null {
            return this.lastStats;
        }
    }

    // URL History Management
    class HistoryManager {
        static load(): HistoryItem[] {
            return JSON.parse(localStorage.getItem("urlHistory") || "[]");
        }

        static save(url: string, malicious: boolean): void {
            const history = this.load();
            history.unshift({ url, malicious });
            if (history.length > MAX_HISTORY_ITEMS) history.pop();
            localStorage.setItem("urlHistory", JSON.stringify(history));
        }

        static renderHistory(): void {
            const historyList = document.getElementById(
                "historyList",
            ) as HTMLUListElement;
            if (!historyList) return;

            const history = this.load();
            historyList.innerHTML = history
                .map(
                    (item) => `
                    <li>
                        <div class="flex items-center justify-between p-3 rounded-lg shadow-sm border
                            ${item.malicious ? "bg-red-50 border-red-200 text-red-700" : "bg-blue-50 border-blue-200 text-blue-700"}">
                            <span class="truncate max-w-[80%]">
                                <a href="${item.url}" class="hover:underline">${item.url}</a>
                            </span>
                            <span class="text-xl">${item.malicious ? "⚠️" : "☑️"}</span>
                        </div>
                    </li>
                `,
                )
                .join("");
        }
    }

    // UI Management
    class UIManager {
        private resultDiv: HTMLDivElement;
        private detailsDiv: HTMLDivElement;
        private toggleButton: HTMLButtonElement;

        constructor() {
            this.resultDiv = document.querySelector(
                "#result",
            ) as HTMLDivElement;
            this.detailsDiv = document.querySelector(
                "#details",
            ) as HTMLDivElement;
            this.toggleButton = document.querySelector(
                "#toggleDetails",
            ) as HTMLButtonElement;

            this.setupEventListeners();
        }

        private setupEventListeners(): void {
            this.toggleButton.addEventListener("click", () =>
                this.toggleDetails(),
            );
        }

        showLoading(): void {
            this.resultDiv.textContent = "Your link is being checked...";
            this.resultDiv.class =
                "mt-5 text-xl font-semibold underline text-gray-50";
            this.detailsDiv.classList.add("hidden");
            this.toggleButton.classList.add("hidden");
        }

        showResult(malicious: boolean): void {
            this.resultDiv.textContent = malicious
                ? "⚠️ | ¡El link es malicioso!"
                : "☑️ | El link es seguro.";
            this.resultDiv.class = malicious
                ? "mt-5 text-left text-xl font-semibold text-red-600"
                : "mt-5 text-left text-xl font-semibold text-gray-200 hover:underline";
            this.toggleButton.classList.remove("hidden");
        }

        showError(message: string): void {
            this.resultDiv.textContent = `❌ Error: ${message}`;
            this.resultDiv.class =
                "mt-5 text-center text-xl font-semibold text-red-500";
        }

        showFreeTrialMessage(): void {
            const freeTrialMsg = document.createElement("p");
            freeTrialMsg.textContent =
                "This was your free scan! Sign in to continue using PhishSlayer.";
            freeTrialMsg.class = "mt-3 text-blue-600 font-medium";
            this.resultDiv.appendChild(freeTrialMsg);
        }

        private toggleDetails(): void {
            const appState = new AppState();
            const stats = appState.getLastStats();
            if (stats) {
                this.detailsDiv.innerHTML = Object.entries(stats)
                    .map(
                        ([key, value]) =>
                            `<p><strong>${key}:</strong> ${value}</p>`,
                    )
                    .join("");
                this.detailsDiv.classList.toggle("hidden");
            }
        }
    }

    // URL Scanner
    class URLScanner {
        static async scan(url: string): Promise<ScanResult> {
            const response = await fetch(API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ url }),
            });

            if (!response.ok) {
                throw new Error((await response.json()).detail);
            }

            return await response.json();
        }
    }

    // Main App
    class App {
        private form: HTMLFormElement;
        private input: HTMLInputElement;
        private state: AppState;
        private ui: UIManager;

        constructor() {
            this.form = document.querySelector("#scanForm") as HTMLFormElement;
            this.input = document.querySelector("#link") as HTMLInputElement;
            this.state = new AppState();
            this.ui = new UIManager();

            this.initialize();
        }

        private initialize(): void {
            this.setupFormHandler();
            HistoryManager.renderHistory();
        }

        private async setupFormHandler(): Promise<void> {
            this.form.addEventListener("submit", async (e) => {
                e.preventDefault();
                const url = this.input.value;

                const isSignedIn = (await window.Clerk?.user?.id) != null;

                if (!isSignedIn && this.state.getCount() >= 1) {
                    window.Clerk.openSignUp();
                    return;
                }

                if (!isSignedIn) {
                    this.state.incrementCount();
                }

                this.ui.showLoading();

                try {
                    const result = await URLScanner.scan(url);
                    this.state.setLastStats(result.stats);
                    this.ui.showResult(result.malicious);
                    HistoryManager.save(url, result.malicious);
                    HistoryManager.renderHistory();

                    if (!isSignedIn && this.state.getCount() === 1) {
                        this.ui.showFreeTrialMessage();
                    }
                } catch (error) {
                    this.ui.showError(
                        error instanceof Error
                            ? error.message
                            : "Error al conectar con el servidor",
                    );
                    console.error(error);
                }
            });
        }
    }

    // Initialize app when DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
        new App();
    });
</script>
